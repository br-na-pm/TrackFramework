def mailRecipients = "Cole.pickering@br-automation.com"

def Version() {
    echo "Version";
    def branch = Branch();
    def tag = Tag();
    def count = powershell(returnStdout: true, script: "git rev-list HEAD --count").trim();
    try {
        count = powershell(returnStdout: true, script: "git rev-list $tag..HEAD --count").trim();
    }
    catch (err){
    }

    if (branch.matches("release(.*)")) {
        echo "Release Branch";
        return "$tag.$count";
    }
    echo "Not Release Branch";
    tag = tag.substring(0, tag.lastIndexOf('.'))
    tag = tag + '.9';
    return "$tag.$count";
}

def Tag() {
    echo "Tag";
    def tag = "V0.0.9"
    try{
        tag = powershell(returnStdout: true, script: "git describe --abbrev=0 --always").trim();
    }
    catch (err){
    }
    return "$tag";
}



def Branch(){
    echo "Branch";
    def branch = "";
    try {
        branch = "${env.BRANCH_NAME}";
    }
    catch (err)
    {
        branch = powershell(returnStdout: true, script: "git branch --show-current")
    }
    return "$branch";
}

def ExportName(){
    def exportName = "";
    def tag = "";
    tag = Version();
    echo "Export Name";

    exportName = "TrakMap_" + tag + ".zip";
    echo "$exportName";
    return "$exportName";
}


pipeline {
    agent any 
    
    environment {
        PROJECT_DIR = "$WORKSPACE\\BaseProject";
        INSTALLER_SETUP = "$WORKSPACE\\CICD\\InstallerSetup";
        HELP_LOCATION = "$WORKSPACE\\External";
        HELP_NAME = "TrakMapWidgetLibrary";
        HELP_FILE = "TrakMapHelp.hnd";
        HELP_OUTPUT = "..\\CICD\\build\\Help";
        BUILD_SCRIPTS = "$WORKSPACE\\CICD\\ASHelperScripts";
        
        EXPORT_CONFIG_DIR = "$WORKSPACE\\CICD"
        EXPORT_DIR = "$WORKSPACE\\CICD\\build"
    }
    stages {
        stage('Install Dependencies')
        {
            steps {
                powershell(returnStdout: true, script: "python -m pip install --upgrade pip");
                powershell(returnStdout: true, script: "pip install pysimplegui");
                powershell(returnStdout: true, script: "pip install pyinstaller");
            }
        }
        stage('Build AS') {
            steps {
                powershell(returnStdout: true, script:  "python -u \"$BUILD_SCRIPTS\\ASProjectCompile.py\" --project \"$PROJECT_DIR\" --configuration BuildConfig"); 
                
            }
        }
        stage('Create Framework Export') {
            environment {
                VERSION = Version()
                EXPORT_NAME = 'TrakMap'
            }
            steps {
                powershell(returnStdout: true, script: "python \"$BUILD_SCRIPTS\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_CONFIG_DIR\\Trakmap.json\" --output \"$EXPORT_DIR\" --physical \"Physical\\BuildConfig\"");
            }
        }

        stage('Build Help') {
            environment {
                VERSION = Version()
            }
            options {
                timeout(time: 30, unit: "SECONDS")
            }
            steps {
                script {
                    Exception caughtException = null
                    catchError(buildResult: 'SUCCESS', stageResult: 'ABORTED') { 
                        try { 
                            powershell(returnStdout: true, script: "python \"$BUILD_SCRIPTS\\BuildHelp.py\" --project \"$HELP_LOCATION\" --file $HELP_FILE --name $HELP_NAME --output \"$HELP_OUTPUT\"");
                        } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                            error "Caught ${e.toString()}" 
                        } catch (Throwable e) {
                            caughtException = e
                        }
                    }
                    if (caughtException) {
                        error caughtException.message
                    }
                }
            }

            
        }

        stage('Create Installer') {
            environment {
                VERSION = Version()
            }
            steps {
                powershell(returnStdout: true, script: "python \"$BUILD_SCRIPTS\\UpdateInstallerVersion.py\" --project \"$INSTALLER_SETUP\" --name TrakMap --version $VERSION");
                powershell(returnStdout: true, script: "& 'C:\\Program Files (x86)\\NSIS\\makensis.exe' '$INSTALLER_SETUP\\SetupTechnologySolutionComplete.nsi'");
            }
        }
        // stage('Deploy Release')
        // {
        //     environment {
        //         TAG = Tag()
        //     }
        //     when
        //     {
        //         branch 'release'
        //     }
        //     steps {
        //         bat "xcopy \"InstallerSetup\\Installer AS Technology Solution\\Install\\*.exe\" \"C:\\Users\\buchananw\\ABB\\Team Orange - TS-TrackMap\\Releases\\Releases\\$TAG\\\" /y"
        //     }
        // }
        // stage('Deploy Feature')
        // {
        //     when
        //     {
        //         anyOf {
        //             branch 'feature/*'
        //             branch 'development'
        //         }
        //     }
        //     steps {
        //         bat "xcopy \"InstallerSetup\\Installer AS Technology Solution\\Install\\*.exe\" \"C:\\Users\\buchananw\\ABB\\Team Orange - TS-TrackMap\\Releases\\Dev\\$BRANCH_NAME\\\" /y"
        //     }
        // }
    }
    post {
         success {
            script {
                def jobName = currentBuild.fullDisplayName
                emailext body: '''${SCRIPT, template="groovy-html.template"}''',
                        mimeType: 'text/html',
                        subject: "[Jenkins] ${jobName}",
                        to: "${mailRecipients}",
                        from: "wesley.buchanan@br-automation.com",
                        replyTo: "${mailRecipients}"
            }
        }
         failure {
            script {
            
                def jobName = currentBuild.fullDisplayName
                emailext body: '''${SCRIPT, template="groovy-html.template"}''',
                        mimeType: 'text/html',
                        subject: "[Jenkins] ${jobName}",
                        to: "${mailRecipients}",
                        from: "wesley.buchanan@br-automation.com",
                        replyTo: "${mailRecipients}"
            }

         }
         unstable {
             echo 'This will run only if the run was marked as unstable'
         }
         changed {
             echo 'This will run only if the state of the Pipeline has changed'
             echo 'For example, if the Pipeline was previously failing but is now successful'
         }
    }
}
